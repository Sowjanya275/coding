import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Web_SeriesBase
{
    //........................FUNCTION FOR FILTER 1 - filterByRatings
    
    TreeMap<String, Web_Series> filterByRatings(TreeMap<String, Web_Series> tmap, String query)
    {
        
                
        
        //Type your code here
                
        
        return (null);
    }
        
    //........................FUNCTION FOR FILTER 2 - filterByStatusAndGenre
        
    TreeMap<String, Float> filterByStatusAndGenre(TreeMap<String, Web_Series> tmap, String query)
    {
        
                        
        
        //Type your code here
                
        
        return (null);
    }
        
    //........................FUNCTION FOR FILTER 3 - mostPopularGenre       
        
    TreeMap<String,Integer> mostPopularGenre(TreeMap<String, Web_Series> tmap, String query)
    {
        
                        
        
        //Type your code here
                
        
        return(null);
    }
        
}

//...DERIVED CLASS - CALL THE 3 FUNCTIONS ACCORDINGLY AND PRINT THEIR OUTPUTS
class Web_SeriesDerived extends Web_SeriesBase
{
    void printResults(TreeMap<String, Web_Series> tmap, String query)
    {
        int q;
        q=Character.getNumericValue(query.charAt(0));
        
        if(q==1)
        {
            TreeMap<String, Web_Series> q1=filterByRatings(tmap, query);
            
            if(q1.isEmpty())
            {             
                System.out.println("There are no TV Series that are rated above or equal to the given Rating. ");
            }
            else
            {
                Set<Map.Entry<String, Web_Series>> entries = q1.entrySet();
                for (Map.Entry<String, Web_Series> entry : entries) 
                {
                    String key = entry.getKey();
                    Web_Series ws=entry.getValue();
                    System.out.println(key+" - "+ws.rating+" - "+ws.status+" - "+ws.genre);
                }
            }
            
        }
        else if(q==2)
        {
            TreeMap<String, Float> q2=filterByStatusAndGenre(tmap, query);
            
            if(q2.isEmpty())
            {             
                    System.out.println("There are no TV Series with the given status under the given genre. ");
            }
            else
            {
                Set<Map.Entry<String, Float>> entries = q2.entrySet();
                for (Map.Entry<String, Float> entry : entries) 
                {
                    String key = entry.getKey();
                    Float r=entry.getValue();
                
                    System.out.println(key+" - "+r);
                }
            }
        }
        else
        {
            int size,flagq3=1;
            TreeMap<String,Integer> q3=mostPopularGenre(tmap, query);
            
            size=q3.size();
            
            Set<Map.Entry<String, Integer>> entries = q3.entrySet();
            for (Map.Entry<String, Integer> entry : entries) 
            {
                String gen = entry.getKey();
                int noOfWebSeries = entry.getValue();
                
                if(size==1)
                {
                    System.out.println("The Most Popular Genre is "+gen+" and it has "+noOfWebSeries+" Web Series. ");
                }
                else
                {
                    if(flagq3==1)
                    {        
                        System.out.print("The Most Popular Genres are "+gen);
                        flagq3++;
                    }
                    else if(flagq3==size)
                    {        
                        System.out.print(" and "+gen+" as they each have "+noOfWebSeries+" Web Series. ");
                    }
                    else
                    {        
                        System.out.print(", "+gen);
                        flagq3++;
                    }
                }
            }
        }    
    }
}



//...CONSTRUCTOR CLASS - TO PASS VALUES TO TREEMAP - tmap

class Web_Series
{    
    float rating;
    String status,genre;

    public Web_Series (float rating, String status, String genre)  //constructor
    {    
        this.rating = rating;    
        this.status = status;    
        this.genre = genre;    
    }    
}



//...MAIN CLASS - TO GET INPUTS AND CALL FUNCTIONS FROM OTHER CLASSES

public class Web_SeriesMain
{
    public static void main(String[] args)throws Exception
    {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));    
        int n,i;
        String str,name,query;
        TreeMap<String, Web_Series> tmap=new TreeMap();
        
        n=Integer.parseInt(br.readLine().trim());
                
        for(i=0;i<n;i++)
        {
            str=br.readLine();
            String strarr[]=str.split(" - ");
            
            //rating=strarr[1];
            //status=strarr[2];
            //genre=strarr[3];
            Web_Series ws=new Web_Series(Float.parseFloat(strarr[1]),strarr[2],strarr[3]);
            
            name=strarr[0];
            tmap.put(name,ws);
        }
        query=br.readLine();
        
    //..................................................................    
        
        Web_SeriesDerived wsd=new Web_SeriesDerived();
        wsd.printResults(tmap,query);
        
    }
}











*********************** Code Answer ***********************

package testing;

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Web_SeriesBase
{
    //........................FUNCTION FOR FILTER 1 - filterByRatings

    TreeMap<String, Web_Series> filterByRatings(TreeMap<String, Web_Series> tmap, String query)
    {
        String[] querieStrings = query.split(",");
        float rating = Float.parseFloat(querieStrings[1]);

        TreeMap<String, Web_Series> output = new TreeMap<>();
        for (Map.Entry<String,Web_Series> entry : tmap.entrySet()){
            if (entry.getValue().rating >= rating){
                output.put(entry.getKey(), entry.getValue());
            }
        }
        return output;
    }

    //........................FUNCTION FOR FILTER 2 - filterByStatusAndGenre

    TreeMap<String, Float> filterByStatusAndGenre(TreeMap<String, Web_Series> tmap, String query)
    {
        String[] querieStrings = query.split(",");
        String status = querieStrings[1];
        String genre = querieStrings[2];

        TreeMap<String, Float> output = new TreeMap<>();
        for (Map.Entry<String,Web_Series> entry : tmap.entrySet()){
            if (Objects.equals(entry.getValue().status, status) && Objects.equals(entry.getValue().genre, genre)){
                output.put(entry.getKey(), entry.getValue().rating);
            }
        }
        return output;
    }

    //........................FUNCTION FOR FILTER 3 - mostPopularGenre       

    TreeMap<String,Integer> mostPopularGenre(TreeMap<String, Web_Series> tmap, String query)
    {

        TreeMap<String, Integer> output = new TreeMap<>();
        for (Map.Entry<String,Web_Series> entry1 : tmap.entrySet()){
            int c =0;
            for (Map.Entry<String,Web_Series> entry2 : tmap.entrySet()){
                if (Objects.equals(entry1.getValue().genre, entry2.getValue().genre)){
                    c++;
                }
            }
            if (c>1){
                output.put(entry1.getKey(),c);
            }
        }
        return output;
    }
}

//...DERIVED CLASS - CALL THE 3 FUNCTIONS ACCORDINGLY AND PRINT THEIR OUTPUTS
class Web_SeriesDerived extends Web_SeriesBase
{
    void printResults(TreeMap<String, Web_Series> tmap, String query)
    {
        int q;
        q=Character.getNumericValue(query.charAt(0));

        if(q==1)
        {
            TreeMap<String, Web_Series> q1=filterByRatings(tmap, query);

            if(q1.isEmpty())
            {
                System.out.println("There are no TV Series that are rated above or equal to the given Rating. ");
            }
            else
            {
                Set<Map.Entry<String, Web_Series>> entries = q1.entrySet();
                for (Map.Entry<String, Web_Series> entry : entries)
                {
                    String key = entry.getKey();
                    Web_Series ws=entry.getValue();
                    System.out.println(key+" - "+ws.rating+" - "+ws.status+" - "+ws.genre);
                }
            }

        }
        else if(q==2)
        {
            TreeMap<String, Float> q2=filterByStatusAndGenre(tmap, query);

            if(q2.isEmpty())
            {
                System.out.println("There are no TV Series with the given status under the given genre. ");
            }
            else
            {
                Set<Map.Entry<String, Float>> entries = q2.entrySet();
                for (Map.Entry<String, Float> entry : entries)
                {
                    String key = entry.getKey();
                    Float r=entry.getValue();

                    System.out.println(key+" - "+r);
                }
            }
        }
        else
        {
            int size,flagq3=1;
            TreeMap<String,Integer> q3=mostPopularGenre(tmap, query);

            size=q3.size();

            Set<Map.Entry<String, Integer>> entries = q3.entrySet();
            for (Map.Entry<String, Integer> entry : entries)
            {
                String gen = entry.getKey();
                int noOfWebSeries = entry.getValue();

                if(size==1)
                {
                    System.out.println("The Most Popular Genre is "+gen+" and it has "+noOfWebSeries+" Web Series. ");
                }
                else
                {
                    if(flagq3==1)
                    {
                        System.out.print("The Most Popular Genres are "+gen);
                        flagq3++;
                    }
                    else if(flagq3==size)
                    {
                        System.out.print(" and "+gen+" as they each have "+noOfWebSeries+" Web Series. ");
                    }
                    else
                    {
                        System.out.print(", "+gen);
                        flagq3++;
                    }
                }
            }
        }
    }
}



//...CONSTRUCTOR CLASS - TO PASS VALUES TO TREEMAP - tmap

class Web_Series
{
    float rating;
    String status,genre;

    public Web_Series (float rating, String status, String genre)  //constructor
    {
        this.rating = rating;
        this.status = status;
        this.genre = genre;
    }
}



//...MAIN CLASS - TO GET INPUTS AND CALL FUNCTIONS FROM OTHER CLASSES

public class Web_SeriesMain
{
    public static void main(String[] args)throws Exception
    {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        int n,i;
        String str,name,query;
        TreeMap<String, Web_Series> tmap=new TreeMap();

        n=Integer.parseInt(br.readLine().trim());

        for(i=0;i<n;i++)
        {
            str=br.readLine();
            String strarr[]=str.split(" - ");

            //rating=strarr[1];
            //status=strarr[2];
            //genre=strarr[3];
            Web_Series ws=new Web_Series(Float.parseFloat(strarr[1]),strarr[2],strarr[3]);

            name=strarr[0];
            tmap.put(name,ws);
        }
        query=br.readLine();

        //..................................................................

        Web_SeriesDerived wsd=new Web_SeriesDerived();
        wsd.printResults(tmap,query);

    }
}
